// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayerServiceClient is the client API for PlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerServiceClient interface {
	Introduce(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (*Player, error)
	CreateNewPlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*Player, error)
	GetInventory(ctx context.Context, in *Player, opts ...grpc.CallOption) (PlayerService_GetInventoryClient, error)
}

type playerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerServiceClient(cc grpc.ClientConnInterface) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) Introduce(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/player.PlayerService/Introduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) CreateNewPlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/player.PlayerService/CreateNewPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetInventory(ctx context.Context, in *Player, opts ...grpc.CallOption) (PlayerService_GetInventoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlayerService_ServiceDesc.Streams[0], "/player.PlayerService/GetInventory", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerServiceGetInventoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlayerService_GetInventoryClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type playerServiceGetInventoryClient struct {
	grpc.ClientStream
}

func (x *playerServiceGetInventoryClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayerServiceServer is the server API for PlayerService service.
// All implementations must embed UnimplementedPlayerServiceServer
// for forward compatibility
type PlayerServiceServer interface {
	Introduce(context.Context, *NoInput) (*Player, error)
	CreateNewPlayer(context.Context, *CreatePlayerRequest) (*Player, error)
	GetInventory(*Player, PlayerService_GetInventoryServer) error
	mustEmbedUnimplementedPlayerServiceServer()
}

// UnimplementedPlayerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerServiceServer struct {
}

func (UnimplementedPlayerServiceServer) Introduce(context.Context, *NoInput) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Introduce not implemented")
}
func (UnimplementedPlayerServiceServer) CreateNewPlayer(context.Context, *CreatePlayerRequest) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewPlayer not implemented")
}
func (UnimplementedPlayerServiceServer) GetInventory(*Player, PlayerService_GetInventoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedPlayerServiceServer) mustEmbedUnimplementedPlayerServiceServer() {}

// UnsafePlayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServiceServer will
// result in compilation errors.
type UnsafePlayerServiceServer interface {
	mustEmbedUnimplementedPlayerServiceServer()
}

func RegisterPlayerServiceServer(s grpc.ServiceRegistrar, srv PlayerServiceServer) {
	s.RegisterService(&PlayerService_ServiceDesc, srv)
}

func _PlayerService_Introduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).Introduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.PlayerService/Introduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).Introduce(ctx, req.(*NoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_CreateNewPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).CreateNewPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/player.PlayerService/CreateNewPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).CreateNewPlayer(ctx, req.(*CreatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetInventory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Player)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServiceServer).GetInventory(m, &playerServiceGetInventoryServer{stream})
}

type PlayerService_GetInventoryServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type playerServiceGetInventoryServer struct {
	grpc.ServerStream
}

func (x *playerServiceGetInventoryServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

// PlayerService_ServiceDesc is the grpc.ServiceDesc for PlayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "player.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Introduce",
			Handler:    _PlayerService_Introduce_Handler,
		},
		{
			MethodName: "CreateNewPlayer",
			Handler:    _PlayerService_CreateNewPlayer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInventory",
			Handler:       _PlayerService_GetInventory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/player_service.proto",
}
